
=short

<p>Defines an expression, which can be used in other expressions.</p>

=schema

==xml
<element name="rule" type="ms:Rule"
   substitutionGroup="ms:native" />

<complexType name="Rule">
  <complexContent>
    <extension base="ms:Native">
      <sequence>
        <element ref="ms:let" maxOccurs="unbounded" />
      </sequence>
    </extension>
  </complexContent>
</complexType>
==end

=description

<p>Rules can be used on many places, for instance with
<SCHEMA>ms:UnitMayRef/when</SCHEMA>.  In those places, you can put an
expression in-line or refer to an expression which is in a separate
Unit of type <SCHEMA>ms:Type/Rule</SCHEMA> and this element as
<SCHEMA>ms:payload</SCHEMA>.</p>

<p>Only the rule with the <code>name</code> equal to the Unit's
<code>id</code> is accessible from other Units.  But you may use a few
additional expressions to construct the only visible expression.</p>

<p>Do not forget to read about expressions in <SCHEMA>ms:expression</SCHEMA>.</p>

=discuss Expressions in Units

<p>The advantage of putting your expressions in separate Rule units,
is re-use.  With it, come the standand Unit life-cycle and documentation
features at little cost.</p>


=short

<p>Type <i>b:UnitRef</i> is a reference to some <SCHEMA>b:unit</SCHEMA>.</p>

=schema

==xml
<simpleType name="UnitRef">
  <restriction base="string">
    <pattern value="[\p{IsCommon}-\p{IsSpace}]+" />
  </restriction>
</simpleType>
==end

=description

<p>Elements and attributes of type <code>b:UnitRef</code> refer to a
<SCHEMA>b:unit</SCHEMA> instance.  This can be in a namespace qualified
form or in a relative form.  The interpretation has some similarities with
the HTTP URI syntax as defined by [% rfc(3986) %].</p>

<p>When the reference matches with <code>/^(\w+):/</code>, it is
an absolute reference: it starts with a namespace prefix.  When the
reference starts with a colon (<code>:</code>), it is a full path
starting at the root of the namespace.  Otherwise, it is a reference
relative to the path to the Unit in which it is used.  Absolute and
relative path resolution may pass through Namespaces and Subspaces which
have different rules, for instance different path separators.</p>

<h2>Fragment</h2>

<p>The UnitRef can contain a fragment (<code>#</code> followed by a
name), which refers to a <SCHEMA>b:has</SCHEMA> unit reference in
the select unit (defaults to the current unit).  This is useful when
you need to add more details to the reference.

<h2>Advices</h2>

<p>The prefix may not be known when the data is received: it SHOULD
be linked to a namespace only when it is actually used by an
application.</p>

<p>It is RECOMMENDED not to absolute references within the same Namespace
(to use prefixes which refers to the context of the Unit itself). This will
make a restructuring of a namespace harder, because Units may need to be
rewritten for some changes.</p>

<p><b>WARNING:</b> this reference is not the same as a
<code>xsd:IDREF</code>, which MUST refer inside the XML document when
the document is being read.</p>

=example Absolute references

<p>When your <code>ref</code>erence starts with a prefix, like
<code>pref:</code> (some word characters followed by a colon), then
the reference is <i>absolute</i>.  Examples:</p>

<CODE>
pref:                # refers to the root b:namespace unit
pref:a
pref:image/logo.png
</CODE>

<p>You may recognize the <code>.png</code> as a filename extension.
This does not have a meaning here: each Unit has a <code>unit.type</code>
attribute which contains the (mime-)type of the contained data.</p>

<p>Even absolute references may contain <code>".."</code> and
<code>"."</code> path components.</p>

=example Relative references

<p>When the <code>ref</code>erence is not absolute, it is considered
relative.  In this case, there are two variations: when the reference
starts with the <code>path-separator</code> of the <i>root</i>
namespace, it will use that Unit as starting point of the address
resolving.  Otherwise, it will use the Unit in which the reference
was found as start.</p>

<p>Examples, starting from the Unit at address <code>pref:a/b</code>:</p>
<CODE>
  "owner" : "c"    --> pref:a/c  # relative
  "owner" : ":c"   --> pref:c    # absolute, same namespace
  "owner" : "my:c" --> my:c      # absolute, other namespace
</CODE>

=example Designed with mixed path-separators

<p>Say, your Namespace describes DNS PTR records.  You may design the
top with separator <code>'/'</code> and two Subspaces with UnitIDs
<code>ipv4</code> and <code>ipv6</code>.  For Subspace <code>ipv4</code>
you use path-separator <code>'.'</code>, in <code>ipv6</code> you use
separator <code>':'</code>.</p>

<p>Within Subspace <code>ipv4</code>, you create Subspaces named
<code>"127"</code> and <code>"192.168"</code>.  For absolute reference,
there is no difference between having a Subspace <code>"192"</code> which
contains a Unit (probably Subspace) <code>168</code> or having a Unit
with UnitID <code>"192.168"</code> at once.</p>

<p>When you expect a lot of Units, you probably want to have many
Subspaces with each a complex (Access) configuration.  In a small
data-set, everything is in the root namespace.  You will be able to
reorganize the Subspace structure in existing namespaces under fly.</p>

<p>Now, we can write a small program (not implemented yet):</p>
<PERL>
my $ms = Meshy::Space->new;
$ms->prefix(net => 'https://example.org/network');

my $unit = $ms->getUnit("net:ipv4/192.168.12.1");
print $unit->name;  # --> "Gateway for 192.168.12"
</PERL>

<p>Be aware that <SCHEMA>b:unit</SCHEMA> objects have all and more
features as DNS zone files, like cache expiration and distribution.</p>

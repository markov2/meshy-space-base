<h1>Payload examples</h1>

<p>On this page, a few possibilities to maintain bytes.  The specification
may be quite hard to grasp without extensive example.</p>

<h4>Unit contains all information to find an image</h4>

<p>In the example below, the <SCHEMA>ms:unit</SCHEMA> describes an image
which is part of a <i>tar</i>-archive which is gzip-compressed.  This is
a common format in the UNIX/Linux environment.</p>
<XML>
<ms:unit>
  <ms:type>ms:Mime/image/jpeg</ms:type>
  <ms:name>logo.jpg</ms:name>
  <ms:content>
    <ms:size>12121</ms:size>
    <ms:packaged ms:by="ms:Pack/Tar">
      <ms:size>314156</ms:size>
      <ms:compressed ms:by="ms:Compress/Gzip">
        <ms:size>51234</ms:size>
        <ms:fetch ms:href="https://e.com/style.tar.gz" />
      </ms:compressed>
      <ms:entry>logo-50x124.jpg</ms:entry>
    </ms:packaged>
    <ms:checksum ms:by="ms:Checksum/SHA1">
      <ms:encoded ms:by="ms:Encode/Base64">
        <ms:blob>SGVsbG8sIFdvcmxkIQo=</ms:blob>
      </ms:encoded>
    </ms:checksum>
  </ms:content>
</ms:unit>
</XML>
<JSON>
"ms:unit" : {
  "ms:type" : "ms:Mime/image/jpeg",
  "ms:name" : "logo.jpg",
  "ms:content" : {
    "ms:size" : "12121",
    "ms:packaged" : {
      "ms:by" : "ms:Pack/Tar",
      "ms:size" : "314156",
      "ms:compressed" : {
        "ms:by" : "ms:Compress/Gzip",
        "ms:size" : "51234",
        "ms:fetch" : {
          "ms:href" : "https://e.com/style.tar.gz"
        }
      },
      "ms:entry" : "logo-50x124.jpg"
    },
    "ms:checksum" : {
      "ms:by" : "ms:Checksum/SHA1",
      "ms:encoded" : {
        "ms:by" : "ms:Encode/Base64",
        "ms:blob" : { "_" : "SGVsbG8sIFdvcmxkIQo=" }
      }
    }
  }
}
</JSON>
<p>Probably, the SHA1 checksum type includes Base64 encoding, so it
should not be specified explicitly.  However, it is included in the
example to demonstrate how it could work.</p>

<h4>Unit refers to another unit to find an image</h4>

<p>Getting to the data which is distributed via a unit is potentionally
recursive.  In the example below, the details about where to get the
<i>tar</i>-archive is contained in an other unit.  Of course, that
<i>resource</i> can be shared easily by units which describe the separate
data elements in that tar.</p>

<XML>
<ms:unit ms:id="default-logo.jpg">
  <ms:type>ms:Mime/image/jpeg</ms:type>
  <ms:name>logo.jpg</ms:name>
  <ms:content>
    <ms:size>12121</ms:size>
    <ms:packaged ms:by="ms:Pack/Tar">
      <ms:resource ms:ref="dist:style.tar" />
      <ms:entry>logo-50x124.jpg</ms:entry>
    </ms:packaged>
    <ms:checksum ms:by="ms:Checksum/SHA1">
      <ms:blob ms:encoded="ms:Encode/Base64">SGV...kIQo=</ms:blob>
    </ms:checksum>
  </ms:content>
</ms:unit>

<!-- in the Namespace with prefix "dist" -->
<ms:unit ms:id="style.tar">
  <ms:type>ms:Mime/application/tar</ms:type>
  <ms:content>
    <ms:size>314156</ms:size>
    <ms:compressed ms:by="ms:Compress/Gzip">
      <ms:size>51234</ms:size>
      <ms:fetch ms:href="https://e.com/style.tar.gz" />
    </ms:compressed>
  </ms:content>
</ms:unit>
</XML>
<JSON>
"ms:unit" : {
  "ms:id" : "default-logo.jpg",
  "ms:type" : "ms:Mime/image/jpeg",
  "ms:name" : "logo.jpg",
  "ms:content" : {
    "ms:size" : "12121",
    "ms:packaged" : {
      "ms:by" : "ms:Pack/Tar",
      "ms:resource" : { "ms:ref" : "dist:style.tar" },
      "ms:entry" : "logo-50x124.jpg"
    },
    "ms:checksum" : {
      "ms:by" : "ms:Checksum/SHA1",
      "ms:blob" : {
         "ms:encoded" : "ms:Encode/Base64",
         "_" : "SGV...kIQo="
      }
    }
  }
},

"ms:unit" : {
  "ms:id" : "style.tar",
  "ms:type" : "ms:Mime/application/tar",
  "ms:content" : {
    "ms:size" : "314156",
    "ms:compressed" : {
      "ms:by" : "ms:Compress/Gzip",
      "ms:size" : "51234",
      "ms:fetch" : { "ms:href" : "https://e.com/style.tar.gz" }
    }
  }
}
</JSON>
<p>The second unit "<code>style.tar</code>" is in namespace "<code>dist</code>".</p>

<h4>Packing units with Native payload.</h4>

<p>Although the Native payloads can be specified directly, there
may be cases where you want to transport that content like other
other data.  For instance, when you want to be able to check the
signature of them, or when they grow that large that compression
is useful.  This is possible as well, as the example below shows:</p>

<XML>
<ms:unit ms:id="config">
  <ms:type>msc:Type/Collection</ms:type>
  <ms:content>
    <ms:type>ms:Type/Native</ms:type>
    <ms:blob ms:compressed="ms:Compress/Gzip"
       ms:encoded="ms:Encode/Base64">
        ...
    </ms:blob>
    <ms:checksum>
       ...
    </ms:checksum>
  </ms:content>
</ms:unit>
</XML>

=short

<p>Add any kind of data directly inside a unit.</p>

=schema

==xml
<element name="content" type="b:Content"
    substitutionGroup="b:payload" />

<complexType name="Content">
  <complexContent>
    <extension base="b:Payload">
      <sequence>
        <group ref="b:data" />
        <element name="license" type="b:Constant" minOccurs="0" />
        <element ref="b:preview" minOccurs="0" />
      </sequence>
      <attributeGroup ref="b:encapsulate" />
    </extension>
  </complexContent>
</complexType>
==end

=description

<p>The <code>content</code> of a <SCHEMA>b:unit</SCHEMA> is a non-native
payload: data which is interpreted by applications, not by the Meshy
Space (Concept) infrastructure itself.</p>

<p>The content MAY produce bytes which exactly match the unit's
<code>type</code>, but usually it is a serialization of that data.
This can happen in a nested definition.</p>

=group data

<p>All kinds of elements which describe the contained data, plus the data
itself.</p>

=element preview

<p>For many reasons, it may require effort to collect the full data.
Therefore, it is possible to include <b>a few</b> facts from the data.
This may avoid the need for full data retreival and help searching.</p>

=element license

<p>Explains the license of the data where is referred to.  This MUST
be pointing to a Unit of type <UNIT>ms:Role/Constant.License</UNIT>,
of which many are available in <UNIT>spdx:License/</UNIT>.</p>

=short

<p>Take an entry from the wrapped data.</p>

=schema

==xml
<element name="packaged" type="b:Packaged" />

<complexType name="Packaged">
  <sequence>
    <group ref="b:data" />
    <element name="entry" type="b:Bytes" minOccurs="0" />
  </sequence>
  <attribute name="by" type="b:Constant" />
  <attributeGroup ref="b:encapsulate" />
</complexType>
==end

=description

<p>This recursive data element takes an extry from the a package.  The
<code>entry</code> has a meaning within that package.  The <code>data</code>
is usually a <SCHEMA>b:fetch</SCHEMA>, <SCHEMA>b:attachment</SCHEMA>, or
<SCHEMA>b:source</SCHEMA> (contained in another Unit).</p>

<p>When no entry is given, then the full data is addressed.  This can be
used to apply encapsulate information on the full data.</p>

=attributeGroup encapsulate

<p>Describes what we have to do with the extract from the package to
get to the result we need.  It does not describe what the packager
applies internally.</p>

=element entry

<p>The location of the data inside the package.  For most packagers,
this will be a name.  For some, it may be a seek position, but it could
also be a byte range.  Find the details in specific <UNIT>ms:Pack/</UNIT>
implementation.</p>

<p><strong>Be aware</strong> that many packers do not use utf8 for their
entry keys.  You may need to encode your entries.</p>

=attribute by

<p>A constant in the set <UNIT>ms:Packer/</UNIT>.</p>

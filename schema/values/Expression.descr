=short

<p>Read the <a href="/explain/base/expressions.html">the explanation
for a full overview.</p>

=schema

==xml
<complexType name="Expression">
  <complexContent>
    <extension base="b:Reusable">
      <sequence />
      <attribute name="be" type="string" use="required" />
    </extension>
  </complexContent>
</complexType>
==end

=description

<p>The <i>expression</i> results in any kind of computed value.</p>

<p>The syntax of conditions mimics any C-like language.  You may use
other defined expressions by name.  Also, the service may offer additional
names which produce values.</p>

<p>Numbers may have a trailing k, M, G, T, or P to indicate powers
of 1024.  <code>true</code> and <code>false</code> represent values
<code>0</code> and <code>1</code> respectively.</p>

<p>Services MAY decide to refuse all expressions which it has not
predefined itself.  Those are run-time errors.  Also, they MAY refuse
expressions which it cannot be handled fast enough.  Changing the
accepted syntax must be reflected in &mdash;at least a minor&mdash;
version increment and be documented.</p>

=attribute be

<p>This element is (a) Reusable, hence has a name.  That name is made
an alias for the expression in attribute <code>be</code>.</p>

=discuss no pre-parsed expressions

<p>Many XML schemas bend themselves in strange and complex ways to store a
parsed version if expressions.  That makes using them needlessly complex:
a simple expression parser on the receiving side makes it easier to
configure to receive data.</p>

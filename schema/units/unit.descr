=short

<p>The <i>unit</i> is the base of everything: objects which MAY be
useful to be cached.  It is the great uniforming data quantity, a
generalization of many protocols and system features.</p>

=schema

==xml
<element name="unit" type="b:Unit" />

<complexType name="Unit">
  <sequence>
    <group   ref="b:meta_data"  />
    <element ref="b:definitions"   minOccurs="0" maxOccurs="unbounded" />
    <element ref="b:life_cycle"    nillable="true" />
    <element ref="b:payload"       minOccurs="0" nillable="true" />
    <element ref="b:documentation" minOccurs="0" maxOccurs="unbounded" />
  </sequence>
  <attribute name="id" type="b:UnitID" use="required" />
</complexType>
==end

=description

<p>A <i>unit</i> is a logically coherent set of data: bytes with some  
facts about those bytes.  Units have various roles, like configuration,
identities, collections of information, or simply a sequence of bytes.
Units have many elements and attributes, which are often not used: it
is very beneficial to implementations to have a strong uniform object
base.</p>

<p>Units usually have many relations (<SCHEMA>b:has</SCHEMA>) which
tell you about owner, data which were used to create it, and much
more.  This very much depends on the role you have designed for your
unit.</p>

<p>One of the applications of units, is the Meshy Space Concept.
The concept assigns logic roles to units via the <code>type</code>
element (in <SCHEMA>b:meta-data</SCHEMA>).</p>

<p><b>WARNING:</b> unit <code>ids</code> are quite different
from <code>xsd:id</code> identifiers: study the differences in
<SCHEMA>b:UnitID</SCHEMA>!</p>

=attribute id

<p>The unique identifier for this information Unit is used to be
referred to, either within this same information structure, or from
other information structures.  Applications will decide to cache
the units based on this <code>b:id</code> for performance.</p>

=element definitions

<p>Rules which help to interpret fields with expressions.  These
can be grouped and reused, hence it is possible to encounter
more than one block of definitions.</p>

=element life_cycle

<p>A number of fields are used to control the progress of the unit:
when it was created, was deprecated, and is to be removed.  The base
is the revision of the unit.  There is only one revision of a unit in
your cache: the newest.</p>

=group meta_data

<p>A number of fields describe what the unit represents.  If the unit
contains a payload, it gives facts about the payload.  All these facts
are independent from the way the payload is being transported and
stored.</p>

=element payload

<p>The <code>payload</code> is a <i>substitutionGroup</i>, which
means that the element can be filled in by other element in that
group. See <SCHEMA>b:payload</SCHEMA> for a list of alternatives.</p>

<p>Structural elements may only contain any "direct" payload, but only
references to other units.</p>

=element documentation

<p>The Unit may have different levels of documentation, besides the
<code>name</code>, like a short translated name, some tooltip text,
extended html, and/or references to external web-pages.  This all may
be provided in different languages.</p>

<p>When the documentation is not included in the Unit, it may be found
inbetween the Unit's own <SCHEMA>b:has</SCHEMA> relations or those of
the enclosed Subspace, or its parent Namespaces.</p>

=element has

<p>The unit <i>has</i> logical relations to other units, which are
often packaged in a different data collection, maybe on a different
server.  See <SCHEMA>b:has</SCHEMA>.</p>

=example demonstrating a simple unit

==xml
<b:unit b:id="Rules">
  <b:type="ms:Role/Rules" />
  <b:definitions>
    <b:prefix b:name="cc" b:namespace="https://..." />
  </b:definitions>
</b:unit>
<b:unit b:id="ASDJKDJO12314A">
  <b:type>cc:Type/Warc/Result</b:type>
  <b:name>https://markov.solutions/index.html</b:name>
  <b:has b:is="cc:Type/Warc/Request"  b:ref="ASDJKDJO12314A-req">
  <b:has b:is="cc:Type/Warc/Response" b:ref="ASDJKDJO12314A-resp">
  <b:has b:is="cc:Type/Warc/Links"    b:ref="ASDJKDJO12314A-links">
</b:unit>
<b:unit b:id="ASDJKDJO12314A-req">
  <b:type>cc:Type/Warc/Request</b:type>
  <b:language>ms:Language/Nld</b:language>
  <b:content>
    <b:type>cc:Type/Warc/record</b:type>
    <b:charset>iso-8859-1</b:charset>
    <b:size>34516</b:size>
    <b:compressed b:by="ms:Compress/Gzip">
       <b:packaged b:by="cc:Pack/Warc/Archive">
         <b:fetch b:href="cc:/Repo/202102warc-00000" />
         <b:entry>#12314151+11515</b:entry>
       </b:packaged>
    </b:compressed>
  </b:content>
</b:unit>
<b:unit b:id="ASDJKDJO12314A-resp" />
<b:unit b:id="ASDJKDJO12314A-links" />
<b:unit b:id="Type/Warc/Result" />  <!-- etc -->
==end

<p>The units are separately storable and retrievable.  The can have
many kinds of relations, which is expressed by the <code>b:is</code>
attribute.  The <code>b:is</code> does not need to be the type of
the unit where it refers to, but it often is: the application which
follows the relation should understand it.</p>

=discuss Caching units based on <code>b:id</code>

<p class="list">The IDs are unique, because they are QName types:
namespaced strings.  Their uniqueness extends the full data-structure
which is being processed.  When you ask the "owner" of the id namespace,
you can get three answers:</p>
<ul>
<li>the same information;</li>
<li>a newer version of the same information (update); or</li>
<li>a denial of existence: removed (or never stored in the service)</li>
</ul>

=short

<p>Explains which Namespace Unit describes a sub-set of the
top-level Namespace.</p>

=schema

==xml
<element name="subspace" type="ms:Subspace" />

<complexType name="Subspace">
  <sequence>
  </sequence>
  <attribute name="seqnr" type="unsignedLong" use="required" />
  <attribute name="path"  type="string"       use="required" />
</complexType>
==end

=description

<p>The element of the <SCHEMA>ms:namespace</SCHEMA> structure explains
which components of the Namespace have their own specification.
The Subspace can overrule any aspect of its parent Namespace, but inherits
the settings (like permissions) by default.</p>

=attribute seqnr

<p>This obligatory attribute refers to <SCHEMA>ms:has</SCHEMA>
elements with relation <code>ms:Role/Subspace</code> and the same
<code>seqnr</code> value.</p>

=attribute path

<p>The relative location of the Subspace with respect to the
location of this Namespace.  The full location of the Subspace
is the concatenation of the paths from the root Namespace into
the Subspace, where is ensured that each component is separated
by exactly one '/'.</p>

=discuss Absolute location of a Subspace

<p>The root Namespace (the Unit which is opened when you address the
namespace itself) has absolute path <code>(namespace, '')</code>.
When it has a Subspace with <code>path</code> value <code>'a'</code>,
then that Subspace has absolute path <code>(namespace, 'a/')</code>.
It is possible that Subspace <code>'a'</code> has a Subspace by itself,
for instance <code>'b'</code>.  The full path for it is <code>(namespace,
'a/b')</code>.</p>

<p class="list">The following are equivalent, and all result in absolute
path <code>"namespace:a/b/"</code>:</p>
<ul>
<li><code>'a'</code> and <code>'b'</code></li>
<li><code>'/a'</code> and <code>'/b'</code></li>
<li><code>'a/'</code> and <code>'b/'</code></li>
<li><code>'/a/'</code> and <code>'/b/'</code></li>
<li><code>'/a/b/'</code></li>
</ul>

<p>This mimics how HTTP-servers map to a directory structure on disk,
where the user does not know whether the namespace is homogeneous or
not simply based on the Unit reference.  This enabled smooth storage
redesign on the supplier side.</p>

=discuss Absolute locations of Units

<p>Any Unit has one absolute location, but there may be different
routes to reach it: namespace rewrite rules polute the view.  The rewrite
rules only exist to migrate set-ups, not to offer an alternative
reality.</p>

<p>When a reference of a Unit is followed, you start at the
top Namespace description.  First apply namespace rewrite rules
(<SCHEMA>ms:moved</SCHEMA>) on the remaining of the path.  Look
for matching Subspaces for the rewritten path (MAY be in a different
namespace).  Recursively go through the Subspaces.  Meanwhile: construct
a new absolute path from the rewrites.  The Unit's name CAN also
contain slashes.</p>

<p>You SHALL only use the new absolute path when producing new Units to
be released.</p>


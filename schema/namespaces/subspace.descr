=short

<p>Explains which Namespace Unit describes a sub-set of the
top-level Namespace.</p>

=schema

==xml
<element name="subspace" type="b:Subspace" />

<complexType name="Subspace">
  <sequence>
    <element name="inherit"           type="b:UnitRef"    minOccurs="0" />
    <element name="id_unwanted_chars" type="b:Expression" minOccurs="0" />
    <element name="id_encode_ascii"   type="b:Expression" default="'[/]'" />
  </sequence>
  <attribute name="path"              type="b:UnitRef" use="required" />
</complexType>
==end

=description

<p>The element of the <SCHEMA>b:namespace</SCHEMA> structure explains
which components of the Namespace have their own specification.  For
instance, which parts use a different storage architecture.</p>

<p>One <SCHEMA>c:collection</SCHEMA> can use multiple subspaces which
describe some practical and physical restrictions.  In most cases,
the Collection will use the same hardware configuration as its parent,
but in complex set-ups you may need to differentiate.</p>

<p><b>Be warned:</b> <code>id_unwanted_chars</code> and
<code>id_encode_ascii</code> expect a formula: a plain regexp
must be encapsulated in single or double quotes.</p>

=attribute path

<p>The absolute location of the Subspace within the Namespace.</p>

<p>The path MUST be in the same root Namespace: it cannot refer to
external namespaces.</p>

=element inherit

<p>Include all the settings from an other Subspace, by default from the
root Subspace.  This works recursively.  The root Subspace will ignore
this parameter.</p>

=element id_unwanted_chars

<p>When no <code>id</code> is given when a Unit is created, then one
is generated from its <code>name</code>.  This elements contains a
regular expression for all characters and constructs which are to be
removed.</p>

=element id_encode_ascii

<p>When no <code>id</code> is given when a Unit is created, then one
is generated from its <code>name</code>.  In the context, some of the
characters in the name may be dangerous: they play a role in the path
splitting or for any other reason.</p>

<p class="list">The following characters are always encoded:</p>
<ul>
<li>'<code> </code>': all sequences of WhiteSpace are compressed to a
    single blank.  The Unit's full path is a word, so that blank will
    be encoded;</li>
<li>'<code>:</code>': the colon is used after a prefix. Its use indicates
    an absolute SCHEMA>b:UnitRef</SCHEMA>;</li>
<li>'<code>#</code>': the fragment indictors, at the end of a
    <SCHEMA>b:UnitRef</SCHEMA>;</li>
<li>'<code>\</code>': the backslash, which is horribly confusing to
    everyone; and</li>
<li>'<code>%</code>': the encoding indicator.</li>
</ul>

<p>Other characters to be encoded than these can be specified with this
element.</p>

=example for id_unwanted_chars

<p class="list">Stripping characters: (mind the single/double quotes!)</p>

<CODE>
'[: -]'                  # removed all colons, blanks, and dashes.
'( -> | [ ] | \.$ )'     # remove ->, blanks, and trailing dots
'( \.tar\.gz | \.zip )$' # remove trailing .tar.gz and .zip
</CODE>

=example more complex use

<p class="list">More powerfull:</p>
<XML>
<b:let b:name="is_tgz"  b:regexp="\\.tar\.gz$" />
<b:let b:name="is_zip"  b:regexp="\\.zip$" />
<b:let b:name="exts"    b:expr="'(' ~ is_tgz ~ '|' ~ is_zip ~ ')'" />
<b:subspace b:name="releases">
  <b:id_unwanted_chars>exts</id_unwanted_chars>
</b:subspace>
</XML>


<h1>Constants for Roles</h1>

<p>Meshy Space base object <SCHEMA>ms:unit</SCHEMA> has many relations.
The client MAY understand these relations.  The relations have a Role,
and end in a Unit of a certain <a href="types.html">Type</a>.
See also the <a href="/schemas/concept/constants/roles.html">concept Roles</a>.</p>

<p>The <code>is</code> attribute of the <SCHEMA>ms:has</SCHEMA> elements
in a <SCHEMA>ms:unit</SCHEMA> describes the relation.  When that value
is in the <code>ms:</code> namespace, you will find it described below.</p>

<p>Roles do not need to refer to Units with only one specific Type: the
application client must be able to handle (ignore) unexpected Types.</p>

<div id="ms:roles" class="accordion constants">

<h3 name="Documentation">ms:Role/Documentation</h3>
<div>
<p>Refers to a Unit of type <SCHEMA>ms:Type/Documention</SCHEMA></p>
</div>

<h3 name="Manager">ms:Role/Manager</h3>
<div>
<p>When the root Namespace <SCHEMA>ms:has</SCHEMA> a Manager, then
access to that namespace can only take place via that Manager.
At the moment, there is only one Manager implementation: the
<SCHEMA>msc:Type/Collection</SCHEMA>.</p>
</div>

</div> <!-- end accordion -->
